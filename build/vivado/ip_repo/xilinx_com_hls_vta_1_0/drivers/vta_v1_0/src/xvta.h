// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XVTA_H
#define XVTA_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xvta_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Control_bus_BaseAddress;
} XVta_Config;
#endif

typedef struct {
    u32 Control_bus_BaseAddress;
    u32 IsReady;
} XVta;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XVta_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XVta_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XVta_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XVta_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XVta_Initialize(XVta *InstancePtr, u16 DeviceId);
XVta_Config* XVta_LookupConfig(u16 DeviceId);
int XVta_CfgInitialize(XVta *InstancePtr, XVta_Config *ConfigPtr);
#else
int XVta_Initialize(XVta *InstancePtr, const char* InstanceName);
int XVta_Release(XVta *InstancePtr);
#endif

void XVta_Start(XVta *InstancePtr);
u32 XVta_IsDone(XVta *InstancePtr);
u32 XVta_IsIdle(XVta *InstancePtr);
u32 XVta_IsReady(XVta *InstancePtr);
void XVta_EnableAutoRestart(XVta *InstancePtr);
void XVta_DisableAutoRestart(XVta *InstancePtr);

void XVta_Set_insn_count(XVta *InstancePtr, u32 Data);
u32 XVta_Get_insn_count(XVta *InstancePtr);
void XVta_Set_insns(XVta *InstancePtr, u32 Data);
u32 XVta_Get_insns(XVta *InstancePtr);
void XVta_Set_uops(XVta *InstancePtr, u32 Data);
u32 XVta_Get_uops(XVta *InstancePtr);
void XVta_Set_inputs_V(XVta *InstancePtr, u32 Data);
u32 XVta_Get_inputs_V(XVta *InstancePtr);
void XVta_Set_weights_V(XVta *InstancePtr, u32 Data);
u32 XVta_Get_weights_V(XVta *InstancePtr);
void XVta_Set_biases_V(XVta *InstancePtr, u32 Data);
u32 XVta_Get_biases_V(XVta *InstancePtr);
void XVta_Set_outputs_V(XVta *InstancePtr, u32 Data);
u32 XVta_Get_outputs_V(XVta *InstancePtr);

void XVta_InterruptGlobalEnable(XVta *InstancePtr);
void XVta_InterruptGlobalDisable(XVta *InstancePtr);
void XVta_InterruptEnable(XVta *InstancePtr, u32 Mask);
void XVta_InterruptDisable(XVta *InstancePtr, u32 Mask);
void XVta_InterruptClear(XVta *InstancePtr, u32 Mask);
u32 XVta_InterruptGetEnabled(XVta *InstancePtr);
u32 XVta_InterruptGetStatus(XVta *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
